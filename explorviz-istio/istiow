#/bin/bash

usage() { 
    echo "Usage: $0 [OPTIONS] COMMAND"
    echo "This script wraps the functions necessary to deploy explorviz in a kind kubernetes cluster." 
    echo
    echo "Examples:"
    echo "  $0 install           Install explorviz via helm inside the namespace 'explorviz'"
    echo "  $0 -n foo install    Install explorviz via helm inside the namespace 'foo'"
    echo
    echo "OPTIONS:"
    echo "  -n            Specify the namespace used for explorviz. Default: 'explorviz'"
    echo
    echo "COMMAND:"
    echo "  setup-kind    Create a KinD cluster named 'istio-testing'"
    echo "  setup-istio   Install istio using a configuration made for explorviz"
    echo "  install       Install explorviz via helm"
    echo "  upgrade       Upgrade a previously installed helm release"
    echo "  template      Render explorviz chart templates into ../tmp "
    echo "  kiali         Start the istio kiali dashboard"
    exit 1
}

NAMESPACE=explorviz
while getopts ":n:" o; do
    case "${o}" in
        n)
            NAMESPACE=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

kiali-secret() {
    KIALI_USERNAME=$(read -p 'Kiali Username: ' uval && echo -n $uval | base64)
    KIALI_PASSPHRASE=$(read -sp 'Kiali Passphrase: ' pval && echo -n $pval | base64)
    ISTIO_NAMESPACE=istio-system
    kubectl create namespace $ISTIO_NAMESPACE
    cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: kiali
  namespace: $ISTIO_NAMESPACE
  labels:
    app: kiali
type: Opaque
data:
  username: $KIALI_USERNAME
  passphrase: $KIALI_PASSPHRASE
EOF
}

setup-istio() {
    kiali-secret
    istioctl install -f explorviz-istio.yaml
    
    # install addons
    kubectl apply -f ${ISTIO_HOME}/samples/addons -n istio-system
}

setup-minikube() {
    minikube start --vm-driver=kvm2 --memory=16384 --cpus=4 --kubernetes-version=v1.18.0
}

setup-kind() {
    kind create cluster --name istio-testing
    kubectl config use-context kind-istio-testing
}

kiali() {
    istioctl dashboard kiali &
}

# Create the namespace and install explorviz via helm afterwards.
install() {
    echo "Creating namespace..."
    cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Namespace
metadata:
  name: $NAMESPACE
  labels:
    istio-injection: enabled
EOF
    echo "Namespace created."
    sleep 1

    helm dependency update explorviz

    get_ports
    helm install explorviz-istio --namespace $NAMESPACE --set port=$INGRESS_PORT explorviz
}

upgrade() {
    get_ports

    helm upgrade explorviz-istio --namespace $NAMESPACE --set port=$INGRESS_PORT explorviz

}

get_ports() {
    echo "#############################################################"
    echo "#############################################################"
    export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
    echo "## Http2 port $INGRESS_PORT"

    export MONITORING_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="tcp-monitoring")].nodePort}')
    echo "## Set port in kieker.monitoring*.properties to: Set kieker.monitoring.writer.tcp.SingleSocketTcpWriter.port=$MONITORING_PORT"

    export GRPC_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="grpc")].nodePort}')
    echo "## Grpc port $GRPC_PORT"
    echo "#############################################################"
}

delete() {
    helm delete --namespace $NAMESPACE explorviz-istio
}

template() {
    helm template explorviz --output-dir ../tmp
}

if type -t $1 > /dev/null; then
    $1
else
    echo "$1 is not a function"
    echo
    usage
fi



